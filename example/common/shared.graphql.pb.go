// DO NOT EDIT! This file is autogenerated by 'github.com/ncrypthic/graphql-grpc-edge/protoc-gen-graphql/generator'
package common_shared

import (
"github.com/graphql-go/graphql"

	pbGraphql "github.com/ncrypthic/graphql-grpc-edge/graphql"
)

var GraphQL_MoneyInput *graphql.InputObject = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "MoneyInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"currency": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(graphql.String),
		},
		"amount": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(graphql.String),
		},
	},
})

var GraphQL_Money *graphql.Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Money",
	IsTypeOf: func(p graphql.IsTypeOfParams) bool {
		return true
	},
	Fields: graphql.Fields{
		"currency": &graphql.Field{
			Name: "currency",
			Type: graphql.NewNonNull(graphql.String),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if pdata, ok := p.Source.(*Money); ok {
					return pdata.Currency, nil
				} else if data, ok := p.Source.(Money); ok {
					return data.Currency, nil
				}
				return nil, nil
			},
		},
		"amount": &graphql.Field{
			Name: "amount",
			Type: graphql.NewNonNull(graphql.String),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if pdata, ok := p.Source.(*Money); ok {
					return pdata.Amount, nil
				} else if data, ok := p.Source.(Money); ok {
					return data.Amount, nil
				}
				return nil, nil
			},
		},
	},
})


var GraphQL_CurrencyEnum *graphql.Enum = graphql.NewEnum(graphql.EnumConfig{
	Name: "CurrencyEnum",
	Values: graphql.EnumValueConfigMap{
		"UNKNOWN": &graphql.EnumValueConfig{
			Value: Currency_value["UNKNOWN"],
		},
		"USD": &graphql.EnumValueConfig{
			Value: Currency_value["USD"],
		},
		"IDR": &graphql.EnumValueConfig{
			Value: Currency_value["IDR"],
		},
	},
})


func RegisterSharedGraphQLTypes() {
	pbGraphql.RegisterType(GraphQL_MoneyInput)
	pbGraphql.RegisterType(GraphQL_Money)
	pbGraphql.RegisterType(GraphQL_CurrencyEnum)
}